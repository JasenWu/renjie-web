function ipverify(ip_string) {
    var c;
    var n = 0;
    var ch = ".0123456789";
    if (ip_string.length < 7 || ip_string.length > 15) return false;
    for (var i = 0; i < ip_string.length; i++) {
        c = ip_string.charAt(i);
        if (ch.indexOf(c) == -1) return false;
        else {
            if (c == '.') {
                if (ip_string.charAt(i + 1) != '.') n++;
                else return false;
            }
        }
    }
    if (n != 3) return false;
    if (ip_string.indexOf('.') == 0 || ip_string.lastIndexOf('.') == (ip_string.length - 1)) return false;
    szarray = [0, 0, 0, 0];
    var remain;
    var i;
    for (i = 0; i < 3; i++) {
        var n = ip_string.indexOf('.');
        szarray[i] = ip_string.substring(0, n);
        remain = ip_string.substring(n + 1);
        ip_string = remain;
    }
    szarray[3] = remain;
    for (i = 0; i < 4; i++) {
        if (szarray[i] < 0 || szarray[i] > 255) {
            return false;
        }
    }
    if (szarray[0] == 127 && szarray[1] == 0 && szarray[2] == 0) //检查环回地址 { return false; } if(szarray[0] >= 224 && szarray[0] <=239) //检查多播 { return false; }	return true; } function GetMinWidth() { var i=Math.ceil((window.screen.width - 160)*0.55) - 6; return i; } function LoadHelp(helpFileName) { if(window.parent != window) { if (window.parent.topFrame.hl != helpFileName) { window.parent.topFrame.hl = helpFileName; window.parent.helpFrame.location.href = "/help/" + helpFileName; } } return true; } function resize(obj) { var minWidth = GetMinWidth(); if (window.document.body.offsetWidth > minWidth) { obj.autoWidth.style.width = "100%"; } else { obj.autoWidth.style.width = minWidth; } return true; } function resizeHelp(obj) { if (window.document.body.offsetWidth > 290) { obj.autoWidth.style.width = "100%"; } else { obj.autoWidth.style.width = 290; } return true; } function LoadNext(FileName) { if(window.parent != window) window.parent.mainFrame.location.href = FileName; return true; } function lastipverify(lastip,nMin,nMax) { var c; var n = 0; var ch = "0123456789"; if(lastip.length = 0) return false; for (var i = 0; i < lastip.length; i++) { c = lastip.charAt(i); if (ch.indexOf(c) == -1) return false; } if (parseInt(lastip) < nMin || parseInt(lastip) > nMax) return false; return true; } function is_lastip(lastip_string,nMin,nMax) { if(lastip_string.length == 0) { alert("请输入IP地址！"); return false; } if (!lastipverify(lastip_string,nMin,nMax)) { alert("IP地址无效，请重新输入（1-254）！"); return false; } return true; } function maskipverify(ip_string) { var c; var n = 0; var ch = ".0123456789"; if (ip_string.length < 7 || ip_string.length > 15) return false; for (var i = 0; i < ip_string.length; i++) { c = ip_string.charAt(i); if (ch.indexOf(c) == -1) return false; else { if (c == '.') { if(ip_string.charAt(i+1) != '.') n++; else return false; } } } if (n != 3) return false; if (ip_string.indexOf('.') == 0 || ip_string.lastIndexOf('.') == (ip_string.length - 1)) return false; szarray = [0,0,0,0]; var remain; var i; for(i = 0; i < 3; i++) { var n = ip_string.indexOf('.'); szarray[i] = ip_string.substring(0,n); remain = ip_string.substring(n+1); ip_string = remain; } for(i = 0; i < 4; i++) { if (szarray[i] < 0 || szarray[i] > 255) { return false; } } return true; } function is_ipaddr(ip_string) { if(ip_string.length == 0) { alert("请输入IP地址！"); return false; } if (!ipverify(ip_string)) { alert("IP地址无效，请重新输入！"); return false; } return true; } function is_gatewayaddr(gateway_string) { if(gateway_string.length == 0) { alert("请输入网关！"); return false; } if (!ipverify(gateway_string)) { alert("网关地址无效，请重新输入！"); return false; } return true; } function is_dnsaddr(dns_string) { if(dns_string.length == 0) { alert("请输入DNS服务器地址（比如202.96.134.133）！"); return false; } if (!ipverify(dns_string)) { alert("DNS服务器地址无效，请重新输入（比如202.96.134.133）！"); return false; } return true; } function is_domain(domain_string) { var c; var ch = "-.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"; for (var i = 0; i < domain_string.length; i++) { c = domain_string.charAt(i); if (ch.indexOf(c) == -1) { alert("输入含有无效字符，请重新输入！"); return false; } } return true; } function is_digit(digit_string) { var c; var ch = "0123456789"; for (var i = 0; i < digit_string.length; i++) { c = digit_string.charAt(i); if(c == " "&& i ==1) { continue; } if(i > 0) { if(digit_string.charAt(i-1) == " " && c == " ") { continue; } if(digit_string.charAt(i-1) != " " && c == " ") { alert("输入含有无效字符，请重新输入！"); return false; } } if(ch.indexOf(c) == -1 ) { if(c !=" ") { alert("输入含有无效字符，请重新输入！"); return false; } } } return true; } function portverify(port_string) { var c; var ch = "0123456789"; if(port_string.length == 0) return false; for (var i = 0; i < port_string.length; i++) { c = port_string.charAt(i); if (ch.indexOf(c) == -1) return false; } if (parseInt(port_string) <= 0 || parseInt(port_string) >=65535) { return false; } return true; } function is_port(port_string) { if(port_string.length == 0) { alert("请输入端口号（1-65534）！"); return false; } if (!portverify(port_string)) { alert("端口号无效，请重新输入（1-65534）！"); return false; } return true; } function is_number(num_string,nMin,nMax) { var c; var ch = "0123456789"; for (var i = 0; i < num_string.length; i++) { c = num_string.charAt(i); if (ch.indexOf(c) == -1) { //alert("输入含有无效字符，请重新输入！"); return false; } } if(parseInt(num_string) < nMin || parseInt(num_string) > nMax) return false; return true; } function is_maskaddr(mask_string) { if(mask_string.length == 0) { alert("请输入子网掩码（比如255.255.255.0）！"); return false; } if (!maskipverify(mask_string)) { alert("子网掩码错误，请重新输入（比如255.255.255.0）！"); return false; } return true; } function macverify(mac_string) { var c; var n = 0; var ch = "-0123456789ABCDEFabcdef"; var remain; var fs = 0; szarray = [0,0,0,0,0,0]; if (mac_string.length != 17) { alert("MAC地址格式错误！正确的格式为‘00-00-00-00-00-00’."); return false; } for (var i = 0; i < mac_string.length; i++) { c = mac_string.charAt(i); if (ch.indexOf(c) == -1) { alert("无效的MAC地址，请重新输入！"); return false; } else{ if (c == '-') n++; } } if (n != 5) { alert("无效的MAC地址，请重新输入！"); return false; } for(var i = 2; i < 17; i += 3){ if (mac_string.charAt(i) != '-') { alert("无效的MAC地址，请重新输入！"); return false; } } mac_string = mac_string.toLowerCase(); for(var j = 0; j < 5; j++) { var n = mac_string.indexOf("-"); szarray[j] = mac_string.substring(0,n); remain = mac_string.substring(n+1); mac_string = remain; } var mac=/[0-9A-Fa-f]{1}[13579bdfBDF]{1}/g; if(null!=mac.exec(szarray[0])) { alert("该MAC地址为多播MAC地址，请重新输入！"); return false; } for(var k = 0; k < 6; k++) { if (szarray[k] == "ff") { fs++; } } if(fs == 6) { alert("该MAC地址为广播MAC地址，请重新输入！"); return false; } return true; } function is_macaddr(mac_string){ if(mac_string.length == 0){ alert("请输入MAC地址！"); return false; } if (!macverify(mac_string)) { return false; } return true; } function charCompare(szname,limit){ var c; var l=0; var ch = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@^-_.><,[]{}?/+=|\\'\":;~!#$%()` & "; if(szname.length > limit) return false; for (var i = 0; i < szname.length; i++){ c = szname.charAt(i); if (ch.indexOf(c) == -1){ l += 2; } else { l += 1; } if ( l > limit) { return false; } } return true; } function is_hostname(name_string, limit){ if(!charCompare(name_string,limit)){ alert("最多可以输入"+limit+"个字符，请重新输入！"); return false; } else return true; }function is_port_range(port_value) { if(port_value < 0 || port_value > 65534) { alert("无效的端口号！端口号的范围必须是1~65534，请重新输入！"); return false; } else { return true; } }
